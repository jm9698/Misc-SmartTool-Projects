<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dungeon Game</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>
body {
background-color: black;
}
.wall {
width: 100%;
height: 100%;
object-fit: cover;
}
.floor {
width: 100%;
height: 100%;
object-fit: cover;
}
.stair {
position: absolute;
width: 100%;
height: 100%;
object-fit: cover;
z-index: 10;
}
.counter {
position: absolute;
top: 10px;
right: 10px;
color: white;
font-size: 24px;
font-weight: bold;
z-index: 10;
}
.player-sprite {
position: absolute;
width: 100%;
height: 100%;
transition: background-image 0.5s ease-in-out;
}
.menu {
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background-color: rgba(0, 0, 0, 0.8);
border: 2px solid white;
border-radius: 8px;
padding: 20px;
z-index: 20;
}
.menu button {
margin: 5px;
}
.options-menu {
display: flex;
flex-direction: column;
}
.options-menu label {
color: white;
}
.moves-menu {
display: flex;
flex-direction: column;
}
.moves-menu p {
color: white;
}
.red-border {
border: 2px solid transparent;
border-image: linear-gradient(to right, red, transparent) 1;
}
</style>
</head>
<body>
<div id="root"></div>
<script type="text/babel">
//import { frames } from 'frameExports.js'
//console.log (frames.characters.vaporeon.idle.down.frame1);

const vaporeonSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimD1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimD2.png'
];

const vaporeonLeftSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimL1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimL2.png'
];

const vaporeonRightSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimR1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimR2.png'
];

const vaporeonUpSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimU1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimU2.png'
];

const vaporeonDownLeftSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimBL1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimBL2.png'
];

const vaporeonDownRightSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimBR1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimBR2.png'
];

const vaporeonUpLeftSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimTL1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimTL2.png'
];

const vaporeonUpRightSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimTR1.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/idle/IdleanimTR2.png'
];

const vaporeonDownWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimD1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimD2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimD3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimD4Padded.png'
]

const vaporeonUpWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimU1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimU2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimU3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimU4Padded.png'
]

const vaporeonLeftWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimL1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimL2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimL3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimL4Padded.png'
]

const vaporeonRightWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimR1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimR2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimR3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimR4Padded.png'
]

const vaporeonUpLeftWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTL1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTL2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTL3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTL4Padded.png'
]

const vaporeonUpRightWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTR1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTR2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTR3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimTR4Padded.png'
]

const vaporeonDownLeftWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBL1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBL2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBL3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBL4Padded.png'
]

const vaporeonDownRightWalkSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBR1Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBR2Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBR3Padded.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Pokemon%20Sprites/Vaporeon/animations/frames/walk/WalkanimBR4Padded.png'
]

const wallSpriteLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet164l.png';
const wallSpriteRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet167r.png';
const wallSpriteUp = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet001u.png';
const wallSpriteDown = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet186d.png';
const cornerSpriteTopLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet000tl.png'; // Updated to new top left corner sprite
const cornerSpriteTopRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet003tr.png'; // Updated to new top right corner sprite
const cornerSpriteBottomLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet124bl.png'; // Updated to new bottom left corner sprite
const cornerSpriteBottomRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet159br.png';
const enclosedWallSprite1 = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/Brick%20Wall%20Full1.png';
const enclosedWallSprite2 = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/Brick%20Wall%20Full2.png';
const enclosedWallSprite3 = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/Brick%20Wall%20Full3.png';
const enclosedWallSprite4 ='https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/Brick%20Wall%20Full4.png';
const floorSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet068%231.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet070%232.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet116%233.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet117%234.png'
];
const stairSprite = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/General%20sprites/StairsWithTile.png';
const Game = () => {
const [dungeon, setDungeon] = React.useState([]);
const [isAiming, setIsAiming] = React.useState(false); // Track whether player is aiming
const [inDiagonalMode, setInDiagonalMode] = React.useState(false); // Track whether player is using diagonal mode
const [showIndicators, setShowIndicators] = React.useState(false); // State to track indicator visibility
const [isWalking, setIsWalking] = React.useState(false);
const [playerPos, setPlayerPos] = React.useState({ x: 15, y: 15 });
const height = 30
const width = 30
const [stairs, setStairs] = React.useState({ x: 0, y: 0 });
const [floor, setFloor] = React.useState(1);
const [zoomLevel, setZoomLevel] = React.useState(1);
const [cameraTransform, setCameraTransform] = React.useState('');
const [idleSpriteIndex, setIdleSpriteIndex] = React.useState(0); // Index for idle animation
const [walkSpriteIndex, setWalkSpriteIndex] = React.useState(0); // Index for walk animation
const [lastDirection, setLastDirection] = React.useState('down'); // Default direction
const [isPaused, setIsPaused] = React.useState(false); // New paused state
const [showOptions, setShowOptions] = React.useState(false); // State for options menu
const [showMoves, setShowMoves] = React.useState(false); // State for moves menu
const [keyState, setKeyState] = React.useState({
  w: false, a: false, s: false, d: false,
  wHeld: false, aHeld: false, sHeld: false, dHeld: false,
  shift: false
});
const lastDirectionRef = React.useRef(lastDirection);
const isPausedRef = React.useRef(isPaused);
const isWalkingRef = React.useRef(isWalking);
function getWallTileType(x, y, dungeon) {
    // Get neighbors (W = wall)
    let up = y > 0 && dungeon[y-1][x] === 'W';
    let down = y < dungeon.length-1 && dungeon[y+1][x] === 'W';
    let left = x > 0 && dungeon[y][x-1] === 'W';
    let right = x < dungeon[0].length-1 && dungeon[y][x+1] === 'W';

    // Corners (optional, for fancy tilesets)
    let upLeft = y > 0 && x > 0 && dungeon[y-1][x-1] === 'W';
    let upRight = y > 0 && x < dungeon[0].length-1 && dungeon[y-1][x+1] === 'W';
    let downLeft = y < dungeon.length-1 && x > 0 && dungeon[y+1][x-1] === 'W';
    let downRight = y < dungeon.length-1 && x < dungeon[0].length-1 && dungeon[y+1][x+1] === 'W';
if (!up && !left && right && down) return 'wall_corner_topleft';
    if (!up && !right && left && down) return 'wall_corner_topright';
    if (!down && !left && right && up) return 'wall_corner_bottomleft';
    if (!down && !right && left && up) return 'wall_corner_bottomright';
    if (up && down && !left && !right) return 'wall_vertical';
    if (!up && !down && left && right) return 'wall_horizontal';
    if (up && !down && left && right) return 'wall_horizontal_topcap';
    if (!up && down && left && right) return 'wall_horizontal_bottomcap';
    if (up && down && !left && right) return 'wall_left_vertical'
    if (up && down && !right && left) return 'wall_right_vertical'
    if (!up && down && !right && !left) return 'wall_isolated_down'
    if (up && !down && !right && !left) return 'wall_isolated_up'
    if (!up && !down && right && !left) return 'wall_isolated_right'
    if (!up && !down && !right && left) return 'wall_isolated_left'
    
    // ...continue for other combinations...
   else return 'wall_full'; // fallback
}
const wallSpriteMap = {
  wall_corner_topleft: cornerSpriteTopLeft,
  wall_corner_topright: cornerSpriteTopRight,
  wall_corner_bottomleft: cornerSpriteBottomLeft,
  wall_corner_bottomright: cornerSpriteBottomRight,
  wall_vertical: wallSpriteLeft,
  wall_left_vertical: wallSpriteLeft,
  wall_right_vertical: wallSpriteRight,
  wall_horizontal: wallSpriteUp,
  wall_horizontal_topcap: wallSpriteDown,
  wall_horizontal_bottomcap: wallSpriteUp,
  wall_full: enclosedWallSprite4, //placeholder
  wall_isolated_down: wallSpriteLeft,
  wall_isolated_up: wallSpriteLeft,
  wall_isolated_right: wallSpriteUp,
  wall_isolated_left: wallSpriteUp
  // ...etc...
};
function updateKeyState(key, value) {
  setKeyState(prev => ({ ...prev, [key]: value }));
}
function randInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}
function makeRoom(x, y, w, h) {
  return { x, y, w, h, center: { x: Math.floor(x + w / 2), y: Math.floor(y + h / 2) } };
}
function roomsOverlap(a, b) {
  return (
    a.x < b.x + b.w &&
    a.x + a.w > b.x &&
    a.y < b.y + b.h &&
    a.y + a.h > b.y
  );
}
function carveRoom(dungeon, room) {
  for (let y = room.y; y < room.y + room.h; y++) {
    for (let x = room.x; x < room.x + room.w; x++) {
      dungeon[y][x] = 'F'; // Mark as floor (will be replaced with random floor tile later)
    }
  }
}
function carveCorridor(dungeon, from, to) {
  let x = from.x, y = from.y;
  while (x !== to.x) {
    dungeon[y][x] = 'F';
    x += x < to.x ? 1 : -1;
  }
  while (y !== to.y) {
    dungeon[y][x] = 'F';
    y += y < to.y ? 1 : -1;
  }
}
function generateProceduralDungeon(width, height, options = {}) {
  const {
    roomAttempts = 60,
    minRoomSize = 4,
    maxRoomSize = 10,
    maxRooms = 8
  } = options;
  const dungeon = Array.from({ length: height }, () => Array(width).fill('W'));
  const rooms = [];
//*

for (let i = 0; i < roomAttempts && rooms.length < maxRooms; i++) {
    const w = randInt(minRoomSize, maxRoomSize + 1);
    const h = randInt(minRoomSize, maxRoomSize + 1);
    const x = randInt(1, width - w - 1);
    const y = randInt(1, height - h - 1);
    const newRoom = makeRoom(x, y, w, h);
if (rooms.every(room => !roomsOverlap(newRoom, room))) {
      carveRoom(dungeon, newRoom);
      rooms.push(newRoom);
    }
  }
for (let i = 1; i < rooms.length; i++) {
    carveCorridor(dungeon, rooms[i - 1].center, rooms[i].center);
  }

for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      if (dungeon[y][x] === 'F') dungeon[y][x] = getRandomFloorTile();
    }
  }
const lastRoom = rooms[rooms.length - 1];
  if (lastRoom) dungeon[lastRoom.center.y][lastRoom.center.x] = 'S';
const firstRoom = rooms[0] || { center: { x: Math.floor(width/2), y: Math.floor(height/2) } };
return {
    dungeon,
    playerStart: { x: firstRoom.center.x, y: firstRoom.center.y }
  };
}
React.useEffect(() => {
  generateDungeon();
}, [floor]);

React.useEffect(() => {
  lastDirectionRef.current = lastDirection;
  isPausedRef.current = isPaused;
  isWalkingRef.current = isWalking;
}, [lastDirection, isPaused, isWalking]);

React.useEffect(() => {
  setIdleSpriteIndex(0);
  setWalkSpriteIndex(0);
}, [lastDirection, isWalking]);
//*

React.useEffect(() => {
const handleKeyDown = (e) => {
if (e.key === 'Shift') {
updateKeyState('shift', true); // Set Shift pressed state to true
setShowIndicators(prev => !prev); // show indicators
}

let newX = playerPos.x;
let newY = playerPos.y;

switch (e.key) {
case 'w':
if (!keyState.w) {
updateKeyState('w', true);
if (isAiming){
setLastDirection('up');
}}
else if (isAiming && keyState.w && keyState.a){
setLastDirection('up-left');
}
else if (!isAiming && !inDiagonalMode && !keyState.wHeld){ newY -= 1; // Move up unless Shift is pressed
setIsWalking(true);
updateKeyState('wHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up');
}
else if (!isAiming && keyState.w && keyState.a && !keyState.wHeld && !keyState.aHeld){
newY -=1;
newX -=1;
setIsWalking(true);
updateKeyState('wHeld', true);
updateKeyState('aHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up-left');
}
break;
case 's':
updateKeyState('s', true);
if (isAiming){
setLastDirection('down');
}
else if (isAiming && keyState.s && keyState.d){
setLastDirection('down-right');
}
else if (!isAiming && !inDiagonalMode && !keyState.sHeld){ 
newY += 1; // Move down unless Shift is pressed
setIsWalking(true);
updateKeyState('sHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down');
}
else if (!isAiming && keyState.s && keyState.d && !keyState.sHeld && !keyState.dHeld){
newY +=1;
newX +=1;
setIsWalking(true);
updateKeyState('dHeld', true);
updateKeyState('sHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down-right');
}
break;
case 'a':
updateKeyState('a', true);
if (isAiming){
setLastDirection('left');
}
else if (isAiming && keyState.a && keyState.s){
setLastDirection('down-left');
}
else if (!isAiming && !inDiagonalMode && !keyState.aHeld){ newX -= 1; // Move left unless Shift is pressed
setIsWalking(true);
updateKeyState('aHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('left');
}
else if (!isAiming && keyState.s && keyState.a && !keyState.sHeld &&!keyState.aHeld){
newY +=1;
newX -=1;
setIsWalking(true);
updateKeyState('sHeld', true);
updateKeyState('aHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down-left');
}
break;
case 'd':
updateKeyState('d', true);
if (isAiming){
setLastDirection('right');
}
else if (isAiming && keyState.d && keyState.w){
setLastDirection('up-right');
}
else if (!isAiming && !inDiagonalMode && !keyState.dHeld){ newX += 1; // Move right unless Shift is pressed
setIsWalking(true);
updateKeyState('dHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('right');
}
else if (!isAiming && keyState.d && keyState.w && !keyState.dHeld && !keyState.wHeld){
newY -=1;
newX +=1;
setIsWalking(true);
updateKeyState('dHeld', true);
updateKeyState('wHeld', true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up-right');
}
break;
case 'x': // x to toggle diagonal mode
if (isAiming){
setIsAiming(false);
}
setInDiagonalMode(prev => !prev);
setShowIndicators2(prev => !prev); // show indicators
break;
case 'Escape': // Escape key to toggle pause
setIsPaused(prev => !prev);
break;
case 'Shift': // Shift key to toggle aim mode
if (inDiagonalMode){
setInDiagonalMode(false);
}
setIsAiming(prev => !prev);
return;
default:
return;
}

// Check for collision with walls only if not paused and not holding Shift
if (!isAiming && !isPaused && newY >= 0 && newY < 30 && newX >= 0 && newX < 30 && dungeon[newY][newX] !== 'W' && !keyState.shift) {
setPlayerPos({ x: newX, y: newY });
updateCamera(newX, newY);
}

if (newX === stairs.x && newY === stairs.y) {
alert('You found the stairs! Onward!');
setFloor((prevFloor) => prevFloor + 1);
}
};

const handleKeyUp = (e) => {
if (e.key === 'Shift') {
updateKeyState('shift', false); // Set Shift pressed state to false
}
else if (e.key === 'w') {
setTimeout(() => {
updateKeyState('w', false);
}, 50);
updateKeyState('wHeld', false);
}
else if (e.key === 'a') {
setTimeout(() => {
updateKeyState('a', false);
}, 50);
updateKeyState('aHeld', false);
}
else if (e.key === 's') {
setTimeout(() => {
updateKeyState('s', false);
}, 50);
updateKeyState('sHeld', false);
}
else if (e.key === 'd') {
setTimeout(() => {
updateKeyState('d', false);
}, 50);
updateKeyState('dHeld', false);
}
};

window.addEventListener('keydown', handleKeyDown);
window.addEventListener('keyup', handleKeyUp);
return () => {
window.removeEventListener('keydown', handleKeyDown);
window.removeEventListener('keyup', handleKeyUp);
};
}, [playerPos, stairs, dungeon, isPaused, keyState.shift]); // Add isShiftPressed to dependencies

React.useEffect(() => {
  const interval = setInterval(() => {
    if (!isPausedRef.current && !isWalkingRef.current) {
      switch (lastDirectionRef.current) {
        case 'left':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonLeftSprites.length);
          break;
        case 'right':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonRightSprites.length);
          break;
        case 'up':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonUpSprites.length);
          break;
        case 'down':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonSprites.length);
          break;
        case 'up-left':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonUpLeftSprites.length);
          break;
        case 'up-right':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonUpRightSprites.length);
          break;
        case 'down-left':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonDownLeftSprites.length);
          break;
        case 'down-right':
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonDownRightSprites.length);
          break;
        default:
          setIdleSpriteIndex((prev) => (prev + 1) % vaporeonSprites.length);
      }
    } else if (!isPausedRef.current && isWalkingRef.current) {
      switch (lastDirectionRef.current) {
        case 'down':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonDownWalkSprites.length);
          break;
        case 'up':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonUpWalkSprites.length);
          break;
        case 'right':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonRightWalkSprites.length);
          break;
        case 'left':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonLeftWalkSprites.length);
          break;
        case 'up-left':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonUpLeftWalkSprites.length);
          break;
        case 'up-right':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonUpRightWalkSprites.length);
          break;
        case 'down-left':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonDownLeftWalkSprites.length);
          break;
        case 'down-right':
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonDownRightWalkSprites.length);
          break;
        default:
          setWalkSpriteIndex((prev) => (prev + 1) % vaporeonSprites.length);
      }
    }
  }, 500);
return () => clearInterval(interval);
}, [lastDirection, isPaused, isWalking]); // Add isWalking to dependencies


const generateDungeon = () => {
  const width = 30, height = 30;
  const { dungeon: newDungeon, playerStart } = generateProceduralDungeon(width, height);

  // Find stairs position
  let stairX = 0, stairY = 0;
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      if (newDungeon[y][x] === 'S') {
        stairX = x;
        stairY = y;
      }
    }
  }

  setStairs({ x: stairX, y: stairY });
  setPlayerPos(playerStart);
  setDungeon(newDungeon);
  updateCamera(playerStart.x, playerStart.y);
};

const getRandomFloorTile = () => {
return floorSprites[Math.floor(Math.random() * floorSprites.length)];
};

const updateCamera = (x, y) => {
const offsetX = (15 - x + 1) * 40 + 20;
const offsetY = (15 - y - 8.5) * 40 + 20;
setCameraTransform(`translate(${offsetX}px, ${offsetY}px) scale(${zoomLevel})`);
};

const getLineCoordinates = (direction) => {
const lineCoords = [];
let x = playerPos.x;
let y = playerPos.y;

for (let i = 0; i < 30; i++) { // Extend infinitely until hitting a wall
if (direction === 'up' && y - i >= 0) {
if (dungeon[y - i][x] === 'W') break; // Stop if it hits a wall
lineCoords.push({ x: x, y: y - i });
} else if (direction === 'down' && y + i < 30) {
if (dungeon[y + i][x] === 'W') break; // Stop if it hits a wall
lineCoords.push({ x: x, y: y + i });
} else if (direction === 'left' && x - i >= 0) {
if (dungeon[y][x - i] === 'W') break; // Stop if it hits a wall
lineCoords.push({ x: x - i, y: y });
} else if (direction === 'right' && x + i < 30) {
if (dungeon[y][x + i] === 'W') break; // Stop if it hits a wall
lineCoords.push({ x: x + i, y: y });
}
}
return lineCoords;
};

const lineCoordinates = showIndicators ? getLineCoordinates(lastDirection) : [];

return (
<div className="game-area p-4">
<div className="counter">Floor: {floor}</div>
<div className="dungeon-container">
<div className="dungeon" style={{ transform: cameraTransform }}>
  {dungeon.map((row, rowIndex) => (
    <div key={rowIndex} className="dungeon-row flex">
      {row.map((cell, colIndex) => {
        let wallSprite;

        // Determine sprite based on position
        if (cell === 'W') {
          wallSprite = wallSpriteMap[getWallTileType(colIndex, rowIndex, dungeon)];
          }

          const isIndicatorVisible = lineCoordinates.some(coord => coord.x === colIndex && coord.y === rowIndex) && !(playerPos.x === colIndex && playerPos.y === rowIndex);

          return (
            <div key={colIndex} className={`dungeon-cell relative w-10 h-10 ${isIndicatorVisible && showIndicators ? 'red-border' : ''}`}>
              {cell === 'W' ? (
                <img src={wallSprite} alt="Wall" className="wall absolute" />
              ) : (
                <img src={cell} alt="Floor" className="floor absolute" />
              )}
              {cell === 'S' && (
                <img src={stairSprite} alt="Stairs" className="stair absolute" />
              )}
              {playerPos.x === colIndex && playerPos.y === rowIndex && (
                <img 
                  src={
                      isWalking 
                         ? (lastDirection === 'left' ? vaporeonLeftWalkSprites[walkSpriteIndex] 
                          : lastDirection === 'right' ? vaporeonRightWalkSprites[walkSpriteIndex] 
                          : lastDirection === 'up' ? vaporeonUpWalkSprites[walkSpriteIndex] 
                          : lastDirection === 'down' ? vaporeonDownWalkSprites[walkSpriteIndex]
                          : lastDirection === 'up-left' ? vaporeonUpLeftWalkSprites[walkSpriteIndex]
                          : lastDirection === 'up-right' ? vaporeonUpRightWalkSprites[walkSpriteIndex]
                          : lastDirection === 'down-left' ? vaporeonDownLeftWalkSprites[walkSpriteIndex]
                          : lastDirection === 'down-right' ? vaporeonDownRightWalkSprites[walkSpriteIndex]
                          : vaporeonSprites[idleSpriteIndex])
                          : (lastDirection === 'left' ? vaporeonLeftSprites[idleSpriteIndex] 
                          : lastDirection === 'right' ? vaporeonRightSprites[idleSpriteIndex] 
                          : lastDirection === 'up' ? vaporeonUpSprites[idleSpriteIndex] 
                          : lastDirection === 'down' ? vaporeonSprites[idleSpriteIndex] 
                          : lastDirection === 'down-left' ? vaporeonDownLeftSprites[idleSpriteIndex]
                          : lastDirection === 'down-right' ? vaporeonDownRightSprites[idleSpriteIndex]
                          : lastDirection === 'up-left' ? vaporeonUpLeftSprites[idleSpriteIndex] 
                          : lastDirection === 'up-right' ? vaporeonUpRightSprites[idleSpriteIndex] 
                          : vaporeonSprites[idleSpriteIndex]) // Default sprite when not walking
                  }
                  alt="Vaporeon" 
                  className="player-sprite absolute" 
              />
              )}
            </div>
          );
        })}
      </div>
    ))}
  </div>
  {isPaused && !showOptions && !showMoves && ( // Show main menu when paused
    <div className="menu">
      <h2 className="text-white text-lg">Paused</h2>
      <div className="flex">
        <button className="bg-blue-500 text-white p-2 rounded" onClick={() => setShowMoves(true)}>Moves</button>
        <button className="bg-blue-500 text-white p-2 rounded" onClick={() => { /* Handle Underneath */ }}>Underneath</button>
        <button className="bg-blue-500 text-white p-2 rounded" onClick={() => setShowOptions(true)}>Options</button>
        <button className="bg-red-500 text-white p-2 rounded" onClick={() => setIsPaused(false)}>Close</button>
      </div>
    </div>
  )}
  {isPaused && showOptions && ( // Show options menu when options are clicked
    <div className="menu options-menu">
      <h2 className="text-white text-lg">Options</h2>
      <label>
        <input type="checkbox" /> Checkbox 1
      </label>
      <label>
        <input type="checkbox" /> Checkbox 2
      </label>
      <label>
        <input type="checkbox" /> Checkbox 3
      </label>
      <button className="bg-blue-500 text-white p-2 rounded" onClick={() => setShowOptions(false)}>Back</button>
    </div>
  )}
  {isPaused && showMoves && ( // Show moves menu when Moves is clicked
    <div className="menu moves-menu">
      <h2 className="text-white text-lg">Moves</h2>
      <p className="text-white">Water Pulse - 10/10 PP</p>
      <p className="text-white">Aqua Tail - 15/15 PP</p>
      <p className="text-white">Acid Armor - 30/30 PP</p>
      <p className="text-white">Refresh - 10/10 PP</p>
      <button className="bg-blue-500 text-white p-2 rounded" onClick={() => setShowMoves(false)}>Back</button>
    </div>
  )}
</div>
</div>
);
};

const MemoizedGame = React.memo(Game);

// Render the memoized component
ReactDOM.render(
  <MemoizedGame />, // Use the memoized component as a JSX element
  document.getElementById('root')
  );
</script>
</body>
</html>
