<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dungeon Game</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const vaporeonSprite = 'https://img.pokemondb.net/sprites/ruby-sapphire/normal/vaporeon.png'; // Vaporeon sprite URL

        const Game = () => {
            const [playerPos, setPlayerPos] = React.useState({ x: 15, y: 15 });
            const [dungeon, setDungeon] = React.useState([]);
            const [stairs, setStairs] = React.useState({ x: 0, y: 0 });
            const [floor, setFloor] = React.useState(1);
            const [zoomLevel, setZoomLevel] = React.useState(1);

            React.useEffect(() => {
                generateDungeon();
            }, [floor]);

            React.useEffect(() => {
                const handleKeyDown = (e) => {
                    let newX = playerPos.x;
                    let newY = playerPos.y;

                    switch (e.key) {
                        case 'w':
                            newY -= 1;
                            break;
                        case 's':
                            newY += 1;
                            break;
                        case 'a':
                            newX -= 1;
                            break;
                        case 'd':
                            newX += 1;
                            break;
                        default:
                            return;
                    }

                    // Check for collision with walls
                    if (newY >= 0 && newY < 30 && newX >= 0 && newX < 30 && dungeon[newY][newX] !== 'W') {
                        setPlayerPos({ x: newX, y: newY });
                    }

                    if (newX === stairs.x && newY === stairs.y) {
                        alert('You found the stairs! Level up!');
                        setFloor((prevFloor) => prevFloor + 1);
                    }
                };

                window.addEventListener('keydown', handleKeyDown);

                return () => {
                    window.removeEventListener('keydown', handleKeyDown);
                };
            }, [playerPos, stairs]);

            const generateDungeon = () => {
                const newDungeon = Array.from({ length: 30 }, () => Array(30).fill(' '));
                const stairX = Math.floor(Math.random() * 28) + 1; // Keep stairs within bounds
                const stairY = Math.floor(Math.random() * 28) + 1; // Keep stairs within bounds
                newDungeon[stairY][stairX] = 'S';

                // Create walls around the dungeon
                for (let i = 0; i < 30; i++) {
                    newDungeon[0][i] = 'W'; // Top wall
                    newDungeon[29][i] = 'W'; // Bottom wall
                    newDungeon[i][0] = 'W'; // Left wall
                    newDungeon[i][29] = 'W'; // Right wall
                }

                let playerX, playerY;
                do {
                    playerX = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
                    playerY = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
                } while (playerX === stairX && playerY === stairY);

                setStairs({ x: stairX, y: stairY });
                setPlayerPos({ x: playerX, y: playerY });
                setDungeon(newDungeon);
            };

            const handleFullscreen = () => {
                const element = document.documentElement;
                if (element.requestFullscreen) {
                    element.requestFullscreen();
                } else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                } else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                } else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                }
            };

            const centerCamera = () => {
                const offsetX = (15 - playerPos.x + 5) * 40 + 20;
                const offsetY = (15 - playerPos.y - 5) * 40 + 20;
                return `translate(${offsetX}px, ${offsetY}px) scale(${zoomLevel})`;
            };

            const zoomIn = () => {
                setZoomLevel((prevZoom) => Math.min(prevZoom + 0.1, 2));
            };

            const zoomOut = () => {
                setZoomLevel((prevZoom) => Math.max(prevZoom - 0.1, 1));
            };

            return (
                <div className="game-area p-4">
                    <button onClick={handleFullscreen} className="p-2 bg-blue-500 text-white rounded mb-4">
                        Go Fullscreen
                    </button>
                    <button onClick={zoomIn} className="p-2 bg-green-500 text-white rounded mb-4">
                        Zoom In
                    </button>
                    <button onClick={zoomOut} className="p-2 bg-red-500 text-white rounded mb-4">
                        Zoom Out
                    </button>
                    <div className="dungeon-container">
                        <div className="dungeon" style={{ transform: centerCamera() }}>
                            {dungeon.map((row, rowIndex) => (
                                <div key={rowIndex} className="dungeon-row flex">
                                    {row.map((cell, colIndex) => (
                                        <div key={colIndex} className="dungeon-cell relative w-10 h-10 border border-gray-300">
                                            {playerPos.x === colIndex && playerPos.y === rowIndex ? (
                                                <img src={vaporeonSprite} alt="Vaporeon" className="player-sprite absolute w-full h-full" />
                                            ) : (
                                                cell === 'S' && <div className="stair absolute w-full h-full flex items-center justify-center"><span className="text-3xl">ðŸªœ</span></div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            );
        };

        ReactDOM.render(<Game />, document.getElementById('root'));
    </script>
</body>
</html>
