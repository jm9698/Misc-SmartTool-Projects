<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dungeon Game</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>
body {
background-color: black; /* Set background color to black */
}
.wall {
width: 100%; /* Full width of the cell */
height: 100%; /* Full height of the cell */
object-fit: cover; /* Ensure the image covers the cell */
}
.floor {
width: 100%; /* Full width of the cell */
height: 100%; /* Full height of the cell */
object-fit: cover; /* Ensure the image covers the cell */
}
.stair {
position: absolute;
width: 100%; /* Full width of the cell */
height: 100%; /* Full height of the cell */
object-fit: cover; /* Ensure the image covers the cell */
z-index: 10; /* Layer above floor tiles */
}
.counter {
position: absolute;
top: 10px;
right: 10px;
color: white;
font-size: 24px;
font-weight: bold;
z-index: 10; /* Layer above tiles and sprites */
}
</style>
</head>
<body>
<div id="root"></div>
<script type="text/babel">
const vaporeonSprite = 'https://img.pokemondb.net/sprites/ruby-sapphire/normal/vaporeon.png'; // Vaporeon sprite URL
const wallSpriteLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Brick%20wall%20Left.png'; // Left wall sprite URL
const wallSpriteRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Brick%20Wall%20Right.png'; // Right wall sprite URL
const wallSpriteUp = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Brick%20Wall%20Up2.png'; // Up wall sprite URL
const wallSpriteDown = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Brick%20Wall%20Down.png'; // Down wall sprite URL

const cornerSpriteTopLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Brick%20Wall%20Corner%20Top%20Left.png'; // Top Left corner sprite URL
const cornerSpriteTopRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Brick%20Wall%20Corner%20Top%20Right.png'; // Top Right corner sprite URL
const cornerSpriteBottomLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Brick%20Wall%20Corner%20Bottom%20Left.png'; // Bottom Left corner sprite URL
const cornerSpriteBottomRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Brick%20Wall%20Corner%20Bottom%20Right%203.png'; // Bottom Right corner sprite URL

const floorSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Stone%20floor%20tile%20v%231.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Stone%20floor%20tile%20v%232.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Stone%20floor%20tile%20v%233.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Stone%20floor%20tile%20v%234.png'
]; // Array of floor tile variations

const roomCases = [
{
name: "Open Room",
description: "Open room, containing only outer walls.",
layout: [
"wwwwwwwwww",
"w        w",
"w        w",
"w        w",
"wwwwwwwwww"
]
},
{
name: "Alternate Room",
description: "Other room type, for testing.",
layout: [
"wwwwwwwwww",
"w        w",
"w  wwww  w",
"w        w",
"wwwwwwwwww"
]
}
];

const getRandomRoom = () => {
const randomIndex = Math.floor(Math.random() * roomCases.length);
return roomCases[randomIndex];
};

const Game = () => {
const [playerPos, setPlayerPos] = React.useState({ x: 15, y: 15 });
const [dungeon, setDungeon] = React.useState([]);
const [stairs, setStairs] = React.useState({ x: 0, y: 0 });
const [floor, setFloor] = React.useState(1);
const [zoomLevel, setZoomLevel] = React.useState(1);
const [cameraTransform, setCameraTransform] = React.useState('');

React.useEffect(() => {
generateDungeon();
}, [floor]);

React.useEffect(() => {
const handleKeyDown = (e) => {
let newX = playerPos.x;
let newY = playerPos.y;

switch (e.key) {
case 'w':
newY -= 1;
break;
case 's':
newY += 1;
break;
case 'a':
newX -= 1;
break;
case 'd':
newX += 1;
break;
default:
return;
}

// Check for collision with walls
if (newY >= 0 && newY < 30 && newX >= 0 && newX < 30 && dungeon[newY][newX] !== 'W') {
setPlayerPos({ x: newX, y: newY });
updateCamera(newX, newY); // Update camera position when player moves
}

if (newX === stairs.x && newY === stairs.y) {
alert('You found the stairs! Level up!');
setFloor((prevFloor) => prevFloor + 1);
}
};

window.addEventListener('keydown', handleKeyDown);

return () => {
window.removeEventListener('keydown', handleKeyDown);
};
}, [playerPos, stairs, dungeon]);

const generateDungeon = () => {
const newDungeon = Array.from({ length: 30 }, () => Array(30).fill(' '));
const stairX = Math.floor(Math.random() * 28) + 1; // Keep stairs within bounds
const stairY = Math.floor(Math.random() * 28) + 1; // Keep stairs within bounds
newDungeon[stairY][stairX] = 'S';

// Create walls around the dungeon
for (let i = 0; i < 30; i++) {
newDungeon[0][i] = 'W'; // Top wall
newDungeon[29][i] = 'W'; // Bottom wall
newDungeon[i][0] = 'W'; // Left wall
newDungeon[i][29] = 'W'; // Right wall
}

// Center the wall line vertically
const centerY = Math.floor(newDungeon.length / 2); // Center row
const centerXStart = 0; // Starting column
const centerXEnd = newDungeon[0].length - 1; // Ending column

// Set walls across the center row, leaving two center tiles as floor tiles
for (let col = centerXStart; col <= centerXEnd; col++) {
if (col === Math.floor(centerXEnd / 2) || col === Math.floor(centerXEnd / 2) + 1) {
newDungeon[centerY][col] = getRandomFloorTile(); // Center two tiles as floor tiles
} else {
newDungeon[centerY][col] = 'W'; // Other tiles as walls
}
}

// Ensure a floor tile is generated at the stairs position
newDungeon[stairY][stairX] = getRandomFloorTile();

let playerX, playerY;
do {
playerX = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
playerY = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
} while (playerX === stairX && playerY === stairY);

const currentRoom = getRandomRoom();
console.log(`Current Room: ${currentRoom.name} - ${currentRoom.description}`);

setStairs({ x: stairX, y: stairY });
setPlayerPos({ x: playerX, y: playerY });
setDungeon(newDungeon.map(row => row.map(cell => (cell === ' ' ? getRandomFloorTile() : cell))));
updateCamera(playerX, playerY); // Initialize camera position

// Debugging log for stairs position
console.log(`Stairs are positioned at: (${stairX}, ${stairY})`);
};

const getRandomFloorTile = () => {
return floorSprites[Math.floor(Math.random() * floorSprites.length)];
};

const updateCamera = (x, y) => {
const offsetX = (15 - x + 1) * 40 + 20;
const offsetY = (15 - y - 8.5) * 40 + 20;
setCameraTransform(`translate(${offsetX}px, ${offsetY}px) scale(${zoomLevel})`);
};

return (
<div className="game-area p-4">
<div className="counter">Floor: {floor}</div>
<div className="dungeon-container">
<div className="dungeon" style={{ transform: cameraTransform }}>
{dungeon.map((row, rowIndex) => (
<div key={rowIndex} className="dungeon-row flex">
{row.map((cell, colIndex) => (
  <div key={colIndex} className={`dungeon-cell relative w-10 h-10`}>
    {cell === 'W' && rowIndex === 0 && colIndex === 0 ? (
      <img src={cornerSpriteTopLeft} alt="Corner Top Left" className="wall absolute" />
    ) : cell === 'W' && rowIndex === 0 && colIndex === 29 ? (
      <img src={cornerSpriteTopRight} alt="Corner Top Right" className="wall absolute" />
    ) : cell === 'W' && rowIndex === 29 && colIndex === 0 ? (
      <img src={cornerSpriteBottomLeft} alt="Corner Bottom Left" className="wall absolute" />
    ) : cell === 'W' && rowIndex === 29 && colIndex === 29 ? (
      <img src={cornerSpriteBottomRight} alt="Corner Bottom Right" className="wall absolute" />
    ) : cell === 'W' && rowIndex === 0 ? (
      <img src={wallSpriteUp} alt="Wall Up" className="wall absolute" />
    ) : cell === 'W' && rowIndex === 29 ? (
      <img src={wallSpriteDown} alt="Wall Down" className="wall absolute" />
    ) : cell === 'W' && colIndex === 0 ? (
      <img src={wallSpriteLeft} alt="Wall Left" className="wall absolute" />
    ) : cell === 'W' && colIndex === 29 ? (
      <img src={wallSpriteRight} alt="Wall Right" className="wall absolute" />
    ) : cell === 'W' ? (
      <img src={wallSpriteUp} alt="Wall" className="wall absolute" />
    ) : (
      <img src={cell} alt="Floor" className="floor absolute" />
    )}
    {cell === 'S' && (
      <img src="https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/main/Stairs.png" alt="Stairs" className="stair absolute" />
    )}
    {playerPos.x === colIndex && playerPos.y === rowIndex && (
      <img src={vaporeonSprite} alt="Vaporeon" className="player-sprite absolute w-full h-full" />
    )}
  </div>
))}
</div>
))}
</div>
</div>
</div>
);
};

// Render the Game component
ReactDOM.render(<Game />, document.getElementById('root'));
</script>
</body>
</html>
