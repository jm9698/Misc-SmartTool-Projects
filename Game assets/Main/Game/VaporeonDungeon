<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dungeon Game</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>
body {
background-color: black;
}
.wall {
width: 100%;
height: 100%;
object-fit: cover;
}
.floor {
width: 100%;
height: 100%;
object-fit: cover;
}
.stair {
position: absolute;
width: 100%;
height: 100%;
object-fit: cover;
z-index: 10;
}
.counter {
position: absolute;
top: 10px;
right: 10px;
color: white;
font-size: 24px;
font-weight: bold;
z-index: 10;
}
</style>
</head>
<body>
<div id="root"></div>
<script type="text/babel">
const vaporeonSprite = 'https://img.pokemondb.net/sprites/ruby-sapphire/normal/vaporeon.png';
const wallSpriteLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet164l.png';
const wallSpriteRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet167r.png';
const wallSpriteUp = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet001u.png';
const wallSpriteDown = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet186d.png';
const cornerSpriteTopLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet000tl.png'; // Updated to new top left corner sprite
const cornerSpriteTopRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet003tr.png'; // Updated to new top right corner sprite
const cornerSpriteBottomLeft = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet124bl.png'; // Updated to new bottom left corner sprite
const cornerSpriteBottomRight = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedwallSpritesheet159br.png';
const floorSprites = [
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet068%231.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet070%232.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet116%233.png',
'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/Tiles/Area1/EditedfloorSpritesheet117%234.png'
];
const stairSprite = 'https://raw.githubusercontent.com/jm9698/Misc-SmartTool-Projects/refs/heads/main/Game%20assets/General%20sprites/StairsWithTile.png';
const roomCases = {
  0: "Open Room",
  1: "Alternate Room"
};

const getRandomRoom = () => {
  const randomIndex = Math.floor(Math.random() * Object.keys(roomCases).length);
  return randomIndex;
};

const Game = () => {
const [playerPos, setPlayerPos] = React.useState({ x: 15, y: 15 });
const [dungeon, setDungeon] = React.useState([]);
const [stairs, setStairs] = React.useState({ x: 0, y: 0 });
const [floor, setFloor] = React.useState(1);
const [zoomLevel, setZoomLevel] = React.useState(1);
const [cameraTransform, setCameraTransform] = React.useState('');
const [centerY, setCenterY] = React.useState(0); // Initialize centerY

React.useEffect(() => {
generateDungeon();
}, [floor]);

React.useEffect(() => {
const handleKeyDown = (e) => {
    let newX = playerPos.x;
    let newY = playerPos.y;

    switch (e.key) {
        case 'w':
            newY -= 1;
            break;
        case 's':
            newY += 1;
            break;
        case 'a':
            newX -= 1;
            break;
        case 'd':
            newX += 1;
            break;
        default:
            return;
    }

    // Check for collision with walls
    if (newY >= 0 && newY < 30 && newX >= 0 && newX < 30 && dungeon[newY][newX] !== 'W') {
        setPlayerPos({ x: newX, y: newY });
        updateCamera(newX, newY);
    }

    if (newX === stairs.x && newY === stairs.y) {
        alert('You found the stairs! Level up!');
        setFloor((prevFloor) => prevFloor + 1);
    }
};

window.addEventListener('keydown', handleKeyDown);
return () => {
    window.removeEventListener('keydown', handleKeyDown);
};
}, [playerPos, stairs, dungeon]);

const generateDungeon = () => {
const newDungeon = Array.from({ length: 30 }, () => Array(30).fill(' '));

// Get random room type
const roomType = getRandomRoom();

// Create walls around the dungeon
for (let i = 0; i < 30; i++) {
    newDungeon[0][i] = 'W'; // Top wall
    newDungeon[29][i] = 'W'; // Bottom wall
    newDungeon[i][0] = 'W'; // Left wall
    newDungeon[i][29] = 'W'; // Right wall
}

// Generate walls based on room type
if (roomType === 0) { // Open Room
    for (let col = 1; col < 29; col++) {
        newDungeon[1][col] = getRandomFloorTile(); // Center row as floor tiles
    }
} else if (roomType === 1) { // Alternate Room
    newDungeon[1][1] = 'W'; // Example wall placement for Alternate Room
    newDungeon[1][2] = 'W'; // Example wall placement for Alternate Room
    for (let col = 3; col < 29; col++) {
        newDungeon[1][col] = getRandomFloorTile(); // Center row as floor tiles
    }
}

// Randomly generate stairs position
const stairX = Math.floor(Math.random() * 28) + 1; // Random x position within bounds
const stairY = Math.floor(Math.random() * 28) + 1; // Random y position within bounds
newDungeon[stairY][stairX] = 'S'; // Set stairs in the dungeon

let playerX, playerY;
do {
    playerX = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
    playerY = Math.floor(Math.random() * 28) + 1; // Keep player within bounds
} while (playerX === stairX && playerY === stairY);

setStairs({ x: stairX, y: stairY });
setPlayerPos({ x: playerX, y: playerY });
setDungeon(newDungeon.map(row => row.map(cell => (cell === ' ' ? getRandomFloorTile() : cell))));
updateCamera(playerX, playerY);
};

const getRandomFloorTile = () => {
return floorSprites[Math.floor(Math.random() * floorSprites.length)];
};

const updateCamera = (x, y) => {
const offsetX = (15 - x + 1) * 40 + 20;
const offsetY = (15 - y - 8.5) * 40 + 20;
setCameraTransform(`translate(${offsetX}px, ${offsetY}px) scale(${zoomLevel})`);
};

return (
<div className="game-area p-4">
    <div className="counter">Floor: {floor}</div>
    <div className="dungeon-container">
        <div className="dungeon" style={{ transform: cameraTransform }}>
            {dungeon.map((row, rowIndex) => (
                <div key={rowIndex} className="dungeon-row flex">
                    {row.map((cell, colIndex) => {
                        let wallSprite;

                        // Determine sprite based on position
                        if (cell === 'W') {
                            if (rowIndex === 0 && colIndex === 0) {
                                wallSprite = cornerSpriteTopLeft; // Updated to new top left corner sprite
                            } else if (rowIndex === 0 && colIndex === 29) {
                                wallSprite = cornerSpriteTopRight; // Updated to new top right corner sprite
                            } else if (rowIndex === 29 && colIndex === 0) {
                                wallSprite = cornerSpriteBottomLeft; // Updated to new bottom left corner sprite
                            } else if (rowIndex === 29 && colIndex === 29) {
                                wallSprite = cornerSpriteBottomRight; // Use bottom right corner sprite
                            } else if (rowIndex === 0) {
                                wallSprite = wallSpriteUp; // Use wallSpriteUp for top walls
                            } else if (rowIndex === 29) {
                                wallSprite = wallSpriteDown; // Use wallSpriteDown for bottom wall
                            } else if (colIndex === 0) {
                                wallSprite = wallSpriteLeft; // Left border wall
                            } else if (colIndex === 29) {
                                wallSprite = wallSpriteRight; // Right border wall
                            } else {
                                wallSprite = wallSpriteUp; // Use wallSpriteUp for center walls
                            }
                        }

                        return (
                            <div key={colIndex} className={`dungeon-cell relative w-10 h-10`}>
                                {cell === 'W' ? (
                                    <img src={wallSprite} alt="Wall" className="wall absolute" />
                                ) : (
                                    <img src={cell} alt="Floor" className="floor absolute" />
                                )}
                                {cell === 'S' && (
                                    <img src={stairSprite} alt="Stairs" className="stair absolute" />
                                )}
                                {playerPos.x === colIndex && playerPos.y === rowIndex && (
                                    <img src={vaporeonSprite} alt="Vaporeon" className="player-sprite absolute w-full h-full" />
                                )}
                            </div>
                        );
                    })}
                </div>
            ))}
        </div>
    </div>
</div>
);
};

// Render the Game component
ReactDOM.render(<Game />, document.getElementById('root'));
</script>
</body>
</html>
