//257-262

React.useEffect(() => {
const handleKeyDown = (e) => {
if (e.key === 'Shift') {
setIsShiftPressed(true); // Set Shift pressed state to true
setShowIndicators(prev => !prev); // show indicators
}
//267-387

switch (e.key) {
case 'w':
setIsWPressed(true);
if (isAiming){
setLastDirection('up');
}
else if (isAiming && isWPressed && isAPressed){
setLastDirection('up-left');
}
else if (!isAiming && !inDiagonalMode){ newY -= 1; // Move up unless Shift is pressed
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up');
}
else if (!isAiming && isWPressed && isAPressed){
newY -=1;
newX -=1;
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up-left');
}
break;
case 's':
setIsSPressed(true);
if (isAiming){
setLastDirection('down');
}
else if (isAiming && isSPressed && isDPressed){
setLastDirection('down-right');
}
else if (!isAiming && !inDiagonalMode){ 
newY += 1; // Move down unless Shift is pressed
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down');
}
else if (!isAiming && isSPressed && isDPressed){
newY +=1;
newX +=1;
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down-right');
}
break;
case 'a':
setIsAPressed(true);
if (isAiming){
setLastDirection('left');
}
else if (isAiming && isAPressed && isSPressed){
setLastDirection('down-left');
}
else if (!isAiming && !inDiagonalMode){ newX -= 1; // Move left unless Shift is pressed
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('left');
}
else if (!isAiming && isSPressed && isAPressed){
newY +=1;
newX -=1;
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('down-left');
}
break;
case 'd':
setIsDPressed(true);
if (isAiming){
setLastDirection('right');
}
else if (isAiming && isDPressed && isWPressed){
setLastDirection('up-right');
}
else if (!isAiming && !inDiagonalMode){ newX += 1; // Move right unless Shift is pressed
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('right');
}
else if (!isAiming && isDPressed && isWPressed){
newY -=1;
newX +=1;
setIsWalking(true);
setTimeout(() => {
setIsWalking(false);
}, 3000);
setLastDirection('up-right');
}
break;
case 'x': // x to toggle diagonal mode
if (isAiming){
setIsAiming(false);
}
setInDiagonalMode(prev => !prev);
setShowIndicators2(prev => !prev); // show indicators
break;
case 'Escape': // Escape key to toggle pause
setIsPaused(prev => !prev);
break;
case 'Shift': // Shift key to toggle aim mode
if (inDiagonalMode){
setInDiagonalMode(false);
}
setIsAiming(prev => !prev);
return;
default:
return;
}
//401-433

const handleKeyUp = (e) => {
if (e.key === 'Shift') {
setIsShiftPressed(false); // Set Shift pressed state to false
}
else if (e.key === 'w') {
setTimeout(() => {
setIsWPressed(false);
}, 50);
}
else if (e.key === 'a') {
setTimeout(() => {
setIsAPressed(false);
}, 50);
}
else if (e.key === 's') {
setTimeout(() => {
setIsSPressed(false);
}, 50);
}
else if (e.key === 'd') {
setTimeout(() => {
setIsDPressed(false);
}, 50);
}
};

window.addEventListener('keydown', handleKeyDown);
window.addEventListener('keyup', handleKeyUp);
return () => {
window.removeEventListener('keydown', handleKeyDown);
window.removeEventListener('keyup', handleKeyUp);
};
}, [playerPos, stairs, dungeon, isPaused, isShiftPressed]); // Add isShiftPressed to dependencies
//
